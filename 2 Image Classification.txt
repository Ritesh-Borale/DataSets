import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout
import numpy as np
import matplotlib.pyplot as plt

#Loading the image processing 
mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()
input_shape = (28,28,1)


x_train = x_train.reshape(x_train.shape[0],28,28,1);
x_test = x_test.reshape(x_test.shape[0],28,28,1);
print(x_train.dtype)

x_train = x_train.astype("float32")
x_test = x_test.astype("float32")
print(x_train.dtype)

x_train = x_train / 255
x_test = x_test / 255
print(x_train.shape)

model = Sequential()
model.add(Conv2D(28, kernel_size = (3,3), input_shape = input_shape))

model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Flatten())
model.add(Dense(200, activation="relu"))
model.add(Dropout(0,3))
model.add(Dense(10, activation = "softmax"))
model.summary()

#Train Model
model.compile(optimizer = 'sgd', loss='sparse_categorical_crossentropy', metrics = ['accuracy'])

model.fit(x_train, y_train, epochs = 10)

#Evaluate Model
test_loss, test_accuracy = model.evaluate(x_test, y_test)
print(test_loss, test_accuracy)

image = x_train[4]
plt.imshow(np.squeeze(image), cmap='gray')
plt.show()

image  = image.reshape(1, image.shape[0], image.shape[1], image.shape[2])
predict_model = model.predict(image)
print(format(np.argmax(predict_model)))